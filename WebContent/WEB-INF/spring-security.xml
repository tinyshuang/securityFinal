<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!--登录页面不过滤 -->  
    <http pattern="/login.jsp" security="none" />  
    <!-- 
    	/accessDenied.jsp为权限不对时的返回页面 
    	-->
    <http access-denied-page="/accessDenied.jsp" entry-point-ref="authenticationProcessingFilterEntryPoint">  
        <logout logout-success-url="/login.jsp" />
       <!--一个账号只能登录一次  -->
        <session-management>  
            <concurrency-control max-sessions="1"  error-if-maximum-exceeded="false" />  
        </session-management>  
        <!--  自己实现登录的相关逻辑 -->
         <custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER"  />
         <!-- 一个验证的过滤器 -->
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />  
        <!-- session注销,失效时的路径指向 -->
        <logout invalidate-session="true" logout-url="/j_spring_security_logout" />  
    </http>  
    
    <!-- 登录验证器 -->
    <beans:bean id="loginFilter"  class="hxk.util.security.MyUsernamePasswordAuthenticationFilter">
		<!-- 处理登录,form表单的action指向 -->
		<beans:property name="filterProcessesUrl" value="/login.do"></beans:property>
		<!-- 登陆成功 -->
		<beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"></beans:property>
		<!-- 登陆失败 -->
		<beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"></beans:property>
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
	</beans:bean>
	
	<!-- 登陆成功处置页面 -->
	<beans:bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/index.jsp"></beans:property>
	</beans:bean>
	<!-- 登陆失败处置页面 -->
	<beans:bean id="simpleUrlAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/login.jsp"></beans:property>
	</beans:bean>
    
    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，   
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->  
    <beans:bean id="myFilter"  class="hxk.util.security.MyFilterSecurityInterceptor">  
    	<!-- 用户拥有的权限 -->
        <beans:property name="authenticationManager" ref="authenticationManager" />  
        <!-- 用户是否拥有所请求资源的权限 -->
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />  
        <!-- 资源与权限对应关系 -->
        <beans:property  name="securityMetadataSource" ref="securityMetadataSource" />  
    </beans:bean>  
    
    
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->  
    <authentication-manager alias="authenticationManager">  
        <authentication-provider user-service-ref="myUserDetailService">  
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->  
        </authentication-provider>  
    </authentication-manager>  
    
    
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->  
    <beans:bean id="myUserDetailService" class="hxk.util.security.MyUserDetailService" >
    	<beans:property name="userDao" ref="userDao" />
    	<beans:property name="functionDao" ref="functionDao" />
    </beans:bean>  
    
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
    <beans:bean id="myAccessDecisionManagerBean"  class="hxk.util.security.MyAccessDecisionManager"/>  
    
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->  
    <beans:bean id="securityMetadataSource"  class="hxk.util.security.MySecurityMetadataSource" >
         <beans:constructor-arg name="functionDao" ref="functionDao" />
    </beans:bean>   
    
    <!-- 未登录的切入点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login.jsp"></beans:property>
	</beans:bean>

</beans:beans>